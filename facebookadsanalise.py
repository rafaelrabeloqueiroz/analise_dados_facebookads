"""
An√°lise de Performance de Campanhas do Facebook Ads
===================================================

Este script analisa dados de campanhas publicit√°rias do Facebook, 
calculando m√©tricas de engajamento e criando visualiza√ß√µes por 
g√™nero e faixa et√°ria.

Autor: Rafael
Data: Junho 2025
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import LabelEncoder
import warnings

# Configura√ß√µes gerais
warnings.filterwarnings('ignore')
plt.style.use('default')

# Constantes
ARQUIVO_DADOS = "data.csv"


def carregar_dados(caminho_arquivo):
    """
    Carrega os dados do arquivo CSV contendo informa√ß√µes das campanhas.

    Args:
        caminho_arquivo (str): Caminho para o arquivo CSV

    Returns:
        pd.DataFrame: DataFrame com os dados carregados
    """
    try:
        dados = pd.read_csv(caminho_arquivo)
        print(
            f"‚úÖ Dados carregados com sucesso! Total de registros: {len(dados)}")
        return dados
    except FileNotFoundError:
        print(f"‚ùå Erro: Arquivo '{caminho_arquivo}' n√£o encontrado!")
        return None
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        return None


# Carregamento inicial dos dados
print("üîÑ Carregando dados das campanhas do Facebook Ads...")
dados = carregar_dados(ARQUIVO_DADOS)

# Inicializar vari√°vel de m√©tricas
metricas_demograficas = None


def tratar_dados(dados_brutos):
    """
    Realiza o tratamento e limpeza dos dados das campanhas.

    Remove colunas desnecess√°rias, trata valores ausentes e 
    codifica vari√°veis categ√≥ricas.

    Args:
        dados_brutos (pd.DataFrame): DataFrame com dados originais

    Returns:
        pd.DataFrame: DataFrame tratado e limpo
    """
    if dados_brutos is None:
        return None

    print("üßπ Iniciando tratamento dos dados...")

    # Criar uma c√≥pia para n√£o modificar os dados originais
    dados_tratados = dados_brutos.copy()

    # Remover colunas que n√£o ser√£o utilizadas na an√°lise
    colunas_remover = ["reporting_start", "reporting_end", "fb_campaign_id"]
    dados_tratados.drop(columns=colunas_remover, inplace=True)
    print(f"   ‚Ä¢ Removidas colunas: {', '.join(colunas_remover)}")

    # Remover registros com valores ausentes
    registros_antes = len(dados_tratados)
    dados_tratados.dropna(inplace=True)
    registros_depois = len(dados_tratados)
    print(
        f"   ‚Ä¢ Removidos {registros_antes - registros_depois} registros com valores ausentes")

    # Codificar g√™nero para an√°lise num√©rica (Feminino=0, Masculino=1)
    encoder = LabelEncoder()
    dados_tratados['gender'] = encoder.fit_transform(dados_tratados['gender'])
    print("   ‚Ä¢ G√™nero codificado: Feminino=0, Masculino=1")

    print("‚úÖ Tratamento de dados conclu√≠do!")
    return dados_tratados


# Aplicar tratamento aos dados
if dados is not None:
    dados = tratar_dados(dados)

# ====================================================================
# C√ÅLCULO DE M√âTRICAS DE PERFORMANCE
# ====================================================================


def calcular_metricas_demograficas(dados):
    """
    Calcula m√©tricas de performance das campanhas agrupadas por demografia.

    Computa a taxa de engajamento (CTR - Click Through Rate) e agrupa
    os dados por g√™nero para an√°lise de performance.

    Args:
        dados (pd.DataFrame): DataFrame com dados tratados das campanhas

    Returns:
        pd.DataFrame: DataFrame com m√©tricas agrupadas por g√™nero
    """
    if dados is None:
        return None

    print("üìä Calculando m√©tricas de performance...")

    # Calcular taxa de engajamento (CTR - Click Through Rate)
    # CTR = (Cliques / Impress√µes) √ó 100
    dados["Engajamento"] = (dados["clicks"] / dados["impressions"]) * 100
    print("   ‚Ä¢ Taxa de engajamento (CTR) calculada")

    # Agrupar dados por g√™nero e calcular m√©tricas agregadas
    metricas_demograficas = dados.groupby(["gender"]).agg({
        "impressions": "sum",           # Total de impress√µes por g√™nero
        "clicks": "sum",               # Total de cliques por g√™nero
        "Engajamento": "mean",         # Taxa m√©dia de engajamento
        "total_conversion": "sum",     # Total de convers√µes
        "spent": "sum"                 # Total gasto em publicidade
    }).reset_index()

    # Calcular m√©tricas adicionais
    metricas_demograficas["CPC"] = (
        metricas_demograficas["spent"] / metricas_demograficas["clicks"]
    ).round(2)  # Custo por Clique

    metricas_demograficas["CPM"] = (
        (metricas_demograficas["spent"] /
         metricas_demograficas["impressions"]) * 1000
    ).round(2)  # Custo por Mil Impress√µes

    print("‚úÖ M√©tricas demogr√°ficas calculadas!")
    return metricas_demograficas


# Calcular m√©tricas demogr√°ficas
if dados is not None:
    metricas_demograficas = calcular_metricas_demograficas(dados)


# ====================================================================
# VISUALIZA√á√ïES E AN√ÅLISES
# ====================================================================

def visualizar_engajamento_por_genero(metricas_demograficas):
    """
    Cria um gr√°fico de barras mostrando o engajamento m√©dio por g√™nero.

    Args:
        metricas_demograficas (pd.DataFrame): DataFrame com m√©tricas por g√™nero
    """
    if metricas_demograficas is None:
        print("‚ùå N√£o h√° dados para visualizar!")
        return

    print("üìà Gerando gr√°fico de engajamento por g√™nero...")

    # Preparar dados para visualiza√ß√£o
    generos = metricas_demograficas['gender'].astype(str).tolist()
    engajamento = metricas_demograficas['Engajamento'].tolist()

    # Definir cores atrativas para o gr√°fico
    # Rosa para Feminino, Verde-azulado para Masculino
    cores_barras = ['#FF6B9D', '#4ECDC4']

    # Criar figura com tamanho adequado
    plt.figure(figsize=(10, 6))
    barras = plt.bar(generos, engajamento, color=cores_barras,
                     alpha=0.8, edgecolor='black', linewidth=0.5)

    # Personaliza√ß√£o avan√ßada do gr√°fico
    plt.title('üìä Taxa de Engajamento por G√™nero\n(Click Through Rate - CTR)',
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('üë• G√™nero do P√∫blico', fontsize=12, fontweight='bold')
    plt.ylabel('üìà Taxa M√©dia de Engajamento (%)',
               fontsize=12, fontweight='bold')

    # Personalizar r√≥tulos do eixo X
    plt.xticks(ticks=[0, 1], labels=['üë© Feminino', 'üë® Masculino'], fontsize=11)

    # Adicionar valores nas barras
    for barra in barras:
        altura = barra.get_height()
        plt.text(barra.get_x() + barra.get_width()/2., altura + 0.01,
                 f'{altura:.2f}%', ha='center', va='bottom', fontweight='bold')

    # Melhorar apar√™ncia geral
    plt.grid(axis='y', alpha=0.3, linestyle='--')
    plt.tight_layout()

    # Exibir estat√≠sticas no console
    print("üìã Resumo das m√©tricas por g√™nero:")
    for _, linha in metricas_demograficas.iterrows():
        genero_nome = "Feminino" if linha['gender'] == 0 else "Masculino"
        print(
            f"   ‚Ä¢ {genero_nome}: {linha['Engajamento']:.2f}% de engajamento")

    plt.show()


def visualizar_engajamento_por_idade(dados):
    """
    Cria um gr√°fico de linha mostrando o engajamento m√©dio por faixa et√°ria.

    Args:
        dados (pd.DataFrame): DataFrame com dados das campanhas
    """
    if dados is None:
        print("‚ùå N√£o h√° dados para visualizar!")
        return

    print("üìà Gerando gr√°fico de engajamento por faixa et√°ria...")

    # Calcular engajamento m√©dio por faixa et√°ria
    engajamento_por_idade = dados.groupby(
        "age")["Engajamento"].mean().sort_index()

    # Criar gr√°fico de linha elegante
    plt.figure(figsize=(12, 7))
    plt.plot(engajamento_por_idade.index, engajamento_por_idade.values,
             marker="o", linestyle="-", color="#2E86AB", linewidth=3,
             markersize=8, markerfacecolor="#F24236", markeredgecolor="white",
             markeredgewidth=2)

    # Personaliza√ß√£o avan√ßada
    plt.title('üìä Taxa de Engajamento por Faixa Et√°ria\n'
              'An√°lise de Performance Demogr√°fica',
              fontsize=16, fontweight='bold', pad=20)
    plt.xlabel('üë• Faixa Et√°ria', fontsize=12, fontweight='bold')
    plt.ylabel('üìà Taxa M√©dia de Engajamento (%)',
               fontsize=12, fontweight='bold')

    # Melhorar apar√™ncia
    plt.grid(alpha=0.3, linestyle='--')
    plt.xticks(rotation=45, ha='right')

    # Adicionar valores nos pontos
    for idade, engaj in engajamento_por_idade.items():
        plt.annotate(f'{engaj:.2f}%',
                     (idade, engaj),
                     textcoords="offset points",
                     xytext=(0, 10),
                     ha='center',
                     fontsize=9,
                     bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7))

    plt.tight_layout()

    # Exibir estat√≠sticas no console
    print("üìã Resumo do engajamento por faixa et√°ria:")
    for idade, engajamento in engajamento_por_idade.items():
        print(f"   ‚Ä¢ {idade}: {engajamento:.2f}% de engajamento")

    plt.show()


def gerar_resumo_executivo(dados, metricas_demograficas):
    """
    Gera um resumo executivo com as principais m√©tricas da an√°lise.

    Args:
        dados (pd.DataFrame): DataFrame com dados das campanhas
        metricas_demograficas (pd.DataFrame): DataFrame com m√©tricas por g√™nero
    """
    if dados is None or metricas_demograficas is None:
        return

    print("\n" + "="*60)
    print("üìä RESUMO EXECUTIVO - AN√ÅLISE DE CAMPANHAS FACEBOOK ADS")
    print("="*60)

    # M√©tricas gerais
    total_impressoes = dados['impressions'].sum()
    total_cliques = dados['clicks'].sum()
    total_gastos = dados['spent'].sum()
    total_conversoes = dados['total_conversion'].sum()
    ctr_geral = (total_cliques / total_impressoes) * 100

    print("\nüìà M√âTRICAS GERAIS:")
    print(f"   ‚Ä¢ Total de Impress√µes: {total_impressoes:,}")
    print(f"   ‚Ä¢ Total de Cliques: {total_cliques:,}")
    print(f"   ‚Ä¢ Taxa de Engajamento Geral: {ctr_geral:.2f}%")
    print(f"   ‚Ä¢ Total Investido: R$ {total_gastos:,.2f}")
    print(f"   ‚Ä¢ Total de Convers√µes: {total_conversoes:,}")
    print(f"   ‚Ä¢ Custo por Convers√£o: R$ {total_gastos/total_conversoes:.2f}")

    # An√°lise por g√™nero
    print("\nüë• AN√ÅLISE POR G√äNERO:")
    melhor_genero = metricas_demograficas.loc[metricas_demograficas['Engajamento'].idxmax(
    )]
    genero_nome = "Feminino" if melhor_genero['gender'] == 0 else "Masculino"

    print(f"   ‚Ä¢ Melhor Performance: {genero_nome}")
    print(f"   ‚Ä¢ Taxa de Engajamento: {melhor_genero['Engajamento']:.2f}%")
    print(f"   ‚Ä¢ Total de Cliques: {melhor_genero['clicks']:,}")
    print(f"   ‚Ä¢ CPC (Custo por Clique): R$ {melhor_genero['CPC']:.2f}")

    # An√°lise por faixa et√°ria
    engajamento_por_idade = dados.groupby("age")["Engajamento"].mean()
    melhor_idade = engajamento_por_idade.idxmax()
    melhor_engajamento_idade = engajamento_por_idade.max()

    print("\nüéØ AN√ÅLISE POR FAIXA ET√ÅRIA:")
    print(f"   ‚Ä¢ Melhor Faixa Et√°ria: {melhor_idade}")
    print(f"   ‚Ä¢ Taxa de Engajamento: {melhor_engajamento_idade:.2f}%")

    print("\n" + "="*60)


def main():
    """
    Fun√ß√£o principal que executa toda a an√°lise de dados.
    """
    print("üöÄ INICIANDO AN√ÅLISE DE CAMPANHAS FACEBOOK ADS")
    print("="*60)

    # Verificar se os dados foram carregados corretamente
    if dados is None:
        print("‚ùå N√£o foi poss√≠vel prosseguir devido a problemas no carregamento dos dados.")
        return

    if metricas_demograficas is None:
        print("‚ùå N√£o foi poss√≠vel calcular as m√©tricas demogr√°ficas.")
        return

    # Executar an√°lises
    try:
        # Gerar resumo executivo
        gerar_resumo_executivo(dados, metricas_demograficas)

        # Gerar visualiza√ß√µes
        print("\nüé® Gerando visualiza√ß√µes...")
        visualizar_engajamento_por_genero(metricas_demograficas)
        visualizar_engajamento_por_idade(dados)

        print("\nüéâ An√°lise conclu√≠da com sucesso!")
        print("üí° Dica: Use os insights gerados para otimizar suas pr√≥ximas campanhas!")

    except Exception as e:
        print(f"‚ùå Erro durante a execu√ß√£o da an√°lise: {e}")


# ====================================================================
# EXECU√á√ÉO DO PROGRAMA
# ====================================================================

if __name__ == "__main__":
    main()
